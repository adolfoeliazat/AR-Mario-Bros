#BlueJ class context
comment0.params=
comment0.target=CannyEdgeDetector()
comment0.text=\n\ Constructs\ a\ new\ detector\ with\ default\ parameters.\n
comment1.params=
comment1.target=java.awt.image.BufferedImage\ getSourceImage()
comment1.text=\n\ The\ image\ that\ provides\ the\ luminance\ data\ used\ by\ this\ detector\ to\n\ generate\ edges.\n\ \n\ @return\ the\ source\ image,\ or\ null\n
comment10.params=gaussianKernelWidth
comment10.target=void\ setGaussianKernelWidth(int)
comment10.text=\n\ The\ number\ of\ pixels\ across\ which\ the\ Gaussian\ kernel\ is\ applied.\n\ This\ implementation\ will\ reduce\ the\ radius\ if\ the\ contribution\ of\ pixel\n\ values\ is\ deemed\ negligable,\ so\ this\ is\ actually\ a\ maximum\ radius.\n\ \n\ @param\ gaussianKernelWidth\ a\ radius\ for\ the\ convolution\ operation\ in\n\ pixels,\ at\ least\ 2.\n
comment11.params=
comment11.target=float\ getGaussianKernelRadius()
comment11.text=\n\ The\ radius\ of\ the\ Gaussian\ convolution\ kernel\ used\ to\ smooth\ the\ source\n\ image\ prior\ to\ gradient\ calculation.\ The\ default\ value\ is\ 16.\n\ \n\ @return\ the\ Gaussian\ kernel\ radius\ in\ pixels\n
comment12.params=gaussianKernelRadius
comment12.target=void\ setGaussianKernelRadius(float)
comment12.text=\n\ Sets\ the\ radius\ of\ the\ Gaussian\ convolution\ kernel\ used\ to\ smooth\ the\n\ source\ image\ prior\ to\ gradient\ calculation.\n\ \n\ @return\ a\ Gaussian\ kernel\ radius\ in\ pixels,\ must\ exceed\ 0.1f.\n
comment13.params=
comment13.target=boolean\ isContrastNormalized()
comment13.text=\n\ Whether\ the\ luminance\ data\ extracted\ from\ the\ source\ image\ is\ normalized\n\ by\ linearizing\ its\ histogram\ prior\ to\ edge\ extraction.\ The\ default\ value\n\ is\ false.\n\ \n\ @return\ whether\ the\ contrast\ is\ normalized\n
comment14.params=contrastNormalized
comment14.target=void\ setContrastNormalized(boolean)
comment14.text=\n\ Sets\ whether\ the\ contrast\ is\ normalized\n\ @param\ contrastNormalized\ true\ if\ the\ contrast\ should\ be\ normalized,\n\ false\ otherwise\n
comment15.params=
comment15.target=void\ process()
comment16.params=
comment16.target=void\ initArrays()
comment17.params=kernelRadius\ kernelWidth
comment17.target=void\ computeGradients(float,\ int)
comment18.params=x\ y
comment18.target=float\ hypot(float,\ float)
comment19.params=x\ sigma
comment19.target=float\ gaussian(float,\ float)
comment2.params=image
comment2.target=void\ setSourceImage(java.awt.image.BufferedImage)
comment2.text=\n\ Specifies\ the\ image\ that\ will\ provide\ the\ luminance\ data\ in\ which\ edges\n\ will\ be\ detected.\ A\ source\ image\ must\ be\ set\ before\ the\ process\ method\n\ is\ called.\n\ \ \n\ @param\ image\ a\ source\ of\ luminance\ data\n
comment20.params=low\ high
comment20.target=void\ performHysteresis(int,\ int)
comment21.params=x1\ y1\ i1\ threshold
comment21.target=void\ follow(int,\ int,\ int,\ int)
comment22.params=
comment22.target=void\ thresholdEdges()
comment23.params=r\ g\ b
comment23.target=int\ luminance(float,\ float,\ float)
comment24.params=
comment24.target=void\ readLuminance()
comment25.params=
comment25.target=void\ normalizeContrast()
comment26.params=pixels
comment26.target=void\ writeEdges(int[])
comment3.params=
comment3.target=java.awt.image.BufferedImage\ getEdgesImage()
comment3.text=\n\ Obtains\ an\ image\ containing\ the\ edges\ detected\ during\ the\ last\ call\ to\n\ the\ process\ method.\ The\ buffered\ image\ is\ an\ opaque\ image\ of\ type\n\ BufferedImage.TYPE_INT_ARGB\ in\ which\ edge\ pixels\ are\ white\ and\ all\ other\n\ pixels\ are\ black.\n\ \n\ @return\ an\ image\ containing\ the\ detected\ edges,\ or\ null\ if\ the\ process\n\ method\ has\ not\ yet\ been\ called.\n
comment4.params=edgesImage
comment4.target=void\ setEdgesImage(java.awt.image.BufferedImage)
comment4.text=\n\ Sets\ the\ edges\ image.\ Calling\ this\ method\ will\ not\ change\ the\ operation\n\ of\ the\ edge\ detector\ in\ any\ way.\ It\ is\ intended\ to\ provide\ a\ means\ by\n\ which\ the\ memory\ referenced\ by\ the\ detector\ object\ may\ be\ reduced.\n\ \n\ @param\ edgesImage\ expected\ (though\ not\ required)\ to\ be\ null\n
comment5.params=
comment5.target=float\ getLowThreshold()
comment5.text=\n\ The\ low\ threshold\ for\ hysteresis.\ The\ default\ value\ is\ 2.5.\n\ \n\ @return\ the\ low\ hysteresis\ threshold\n
comment6.params=threshold
comment6.target=void\ setLowThreshold(float)
comment6.text=\n\ Sets\ the\ low\ threshold\ for\ hysteresis.\ Suitable\ values\ for\ this\ parameter\n\ must\ be\ determined\ experimentally\ for\ each\ application.\ It\ is\ nonsensical\n\ (though\ not\ prohibited)\ for\ this\ value\ to\ exceed\ the\ high\ threshold\ value.\n\ \n\ @param\ threshold\ a\ low\ hysteresis\ threshold\n
comment7.params=
comment7.target=float\ getHighThreshold()
comment7.text=\n\ The\ high\ threshold\ for\ hysteresis.\ The\ default\ value\ is\ 7.5.\n\ \n\ @return\ the\ high\ hysteresis\ threshold\n
comment8.params=threshold
comment8.target=void\ setHighThreshold(float)
comment8.text=\n\ Sets\ the\ high\ threshold\ for\ hysteresis.\ Suitable\ values\ for\ this\n\ parameter\ must\ be\ determined\ experimentally\ for\ each\ application.\ It\ is\n\ nonsensical\ (though\ not\ prohibited)\ for\ this\ value\ to\ be\ less\ than\ the\n\ low\ threshold\ value.\n\ \n\ @param\ threshold\ a\ high\ hysteresis\ threshold\n
comment9.params=
comment9.target=int\ getGaussianKernelWidth()
comment9.text=\n\ The\ number\ of\ pixels\ across\ which\ the\ Gaussian\ kernel\ is\ applied.\n\ The\ default\ value\ is\ 16.\n\ \n\ @return\ the\ radius\ of\ the\ convolution\ operation\ in\ pixels\n
numComments=27
